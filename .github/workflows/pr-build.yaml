name: pr-build

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b #v3
      - name: Setup Go
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 #v3.5.0
        with:
          go-version: 1.19.x
      - name: Restore Go cache
        uses: actions/cache@4723a57e26efda3a62cbde1812113b730952852d #v3.2.2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: fmt
        run: make fmt
      - name: vet
        run: make vet
      - name: lint
        run: make lint
      - name: test
        run: make test
      - name: build
        run: make build
      - name: Send go coverage report
        uses: shogo82148/actions-goveralls@31ee804b8576ae49f6dc3caa22591bc5080e7920 #v1.6.0
        with:
          path-to-profile: coverage.out
      - name: Check if working tree is dirty
        run: |
          if [[ $(git diff --stat) != '' ]]; then
            git --no-pager diff
            echo 'run <make test> and commit changes'
            exit 1
          fi
      - name: Build container image
        run: |
          make docker-build IMG=test/k8sdb-controller:latest BUILD_PLATFORMS=linux/amd64 \
            BUILD_ARGS="--cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max"
      - name: Setup Kubernetes
        uses: engineerd/setup-kind@aa272fe2a7309878ffc2a81c56cfe3ef108ae7d0 #v0.5.0
        with:
          version: v0.17.0
      - name: Load test image
        run: kind load docker-image test/k8sdb-controller:latest
      - name: Deploy controller
        run: make deploy IMG=test/k8sdb-controller:latest
      - name: Setup MongoDB
        env:
          MONGODB_VER: ${{ '10.29.2' }}
        run: |
          kubectl create ns mongodb
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm upgrade --wait -i mongodb bitnami/mongodb \
          --version $MONGODB_VER \
          --namespace mongodb \
          --set auth.rootPassword=password \
          --set persistence.enabled=false
          kubectl -n k8sdb-system apply -f ./config/testdata/mongodb/root-secret.yaml
      - name: Run MongoDB tests
        run: |
          kubectl -n k8sdb-system apply -f ./config/testdata/mongodbdatabase
          kubectl -n k8sdb-system apply -f ./config/testdata/mongodbuser
          kubectl -n k8sdb-system wait mongodbdatabase/admin --for=condition=DatabaseReady --timeout=1m
          kubectl -n k8sdb-system wait mongodbuser/foo --for=condition=UserReady --timeout=1m
          kubectl -n mongodb exec -ti deployment/mongodb mongodb -- mongo mongodb://localhost:27017/foo --authenticationDatabase=admin -u foo -p password --eval 'db.bar.insert({"foo":"bar"})'
          kubectl -n k8sdb-system delete -f ./config/testdata/mongodbuser
          ! kubectl -n mongodb exec -ti deployment/mongodb mongodb -- mongo mongodb://localhost:27017/foo --authenticationDatabase=admin -u foo -p password --eval 'db.bar.insert({"foo":"bar"})'
      - name: Setup PostgreSQL
        env:
          POSTGRESQL_VER: ${{ '10.13.8' }}
        run: |
          kubectl create ns postgresql
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm upgrade --wait -i postgresql bitnami/postgresql \
          --version $POSTGRESQL_VER \
          --namespace postgresql \
          --set postgresqlPassword=password \
          --set persistence.enabled=false
          kubectl -n k8sdb-system apply -f ./config/testdata/postgresql/root-secret.yaml
      - name: Run PostgreSQL tests
        run: |
          kubectl -n k8sdb-system apply -f ./config/testdata/postgresqldatabase
          kubectl -n k8sdb-system apply -f ./config/testdata/postgresqluser
          kubectl -n k8sdb-system wait postgresqldatabase/foo --for=condition=DatabaseReady --timeout=1m
          kubectl -n k8sdb-system wait postgresqluser/foo --for=condition=UserReady --timeout=1m
          kubectl -n postgresql exec -ti sts/postgresql-postgresql postgresql -- bash -c "PGPASSWORD=password psql -h localhost -U foo foo -c '\l'"
          kubectl -n k8sdb-system delete -f ./config/testdata/postgresqluser
          ! kubectl -n postgresql exec -ti sts/postgresql-postgresql postgresql -- bash -c "PGPASSWORD=password psql -h localhost -U foo foo -c '\l'"
      - name: Logs
        run: |
          kubectl -n k8sdb-system logs deploy/k8sdb-controller
      - name: Debug failure
        if: failure()
        run: |
          kubectl -n kube-system describe pods
          kubectl -n k8sdb-system describe pods
          kubectl -n k8sdb-system get mongodbdatabase -oyaml
          kubectl -n k8sdb-system get mongodbuser -oyaml
          kubectl -n k8sdb-system get postgresqldatabase -oyaml
          kubectl -n k8sdb-system get postgresqluser -oyaml
          kubectl -n k8sdb-system get all
          kubectl -n k8sdb-system logs deploy/k8sdb-controller
          kubectl -n mongodb get all
          kubectl -n postgresql get all
